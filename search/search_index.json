{
    "docs": [
        {
            "location": "/",
            "text": "zend-debug\n\n\n\n\n\n\nZend\\Debug\n is a component that help the debugging of PHP applications. In\nparticular it offers a static method \nZend\\Debug\\Debug::dump()\n that prints or\nreturns information about an expression. This simple technique of debugging is\ncommon because it is easy to use in an ad hoc fashion and requires no\ninitialization, special tools, or debugging environment.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-debug/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-debug/",
            "title": "zend-debug"
        },
        {
            "location": "/#zend-debug",
            "text": "Zend\\Debug  is a component that help the debugging of PHP applications. In\nparticular it offers a static method  Zend\\Debug\\Debug::dump()  that prints or\nreturns information about an expression. This simple technique of debugging is\ncommon because it is easy to use in an ad hoc fashion and requires no\ninitialization, special tools, or debugging environment.   File issues at https://github.com/zendframework/zend-debug/issues  Documentation is at https://docs.zendframework.com/zend-debug/",
            "title": "zend-debug"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nzend-debug exposes the static method \nZend\\Debug\\Debug::dump()\n, which prints or\nreturns information about an expression. This simple technique of debugging is\ncommon because it is easy to use in an ad hoc fashion and requires no\ninitialization, special tools, or debugging environment.\n\n\nExample\n\n\nZend\\Debug\\Debug::dump($var, $label = null, $echo = true);\n\n\n\nThe \n$var\n argument specifies the expression or variable about which the\n\nZend\\Debug\\Debug::dump()\n method outputs information.\n\n\nThe \n$label\n argument is a string to be prepended to the output of\n\nZend\\Debug\\Debug::dump()\n. It may be useful, for example, to use labels if you\nare dumping information about multiple variables on a given screen.\n\n\nThe boolean \n$echo\n argument specifies whether the output of\n\nZend\\Debug\\Debug::dump()\n is echoed or not. If \nTRUE\n, the output is echoed.\nRegardless of the value of the \n$echo\n argument, the return value of this method\ncontains the output.\n\n\nIt may be helpful to understand that \nZend\\Debug\\Debug::dump()\n wraps the PHP\nfunction \nvar_dump()\n. If the output stream is\ndetected as a web presentation, the output of \nvar_dump()\n is escaped using\n\nhtmlspecialchars()\n and wrapped with HTML\n\n<pre>\n tags.\n\n\n\n\nDebugging with Zend\\Log\n\n\nZend\\Debug\\Debug::dump()\n is best for ad hoc debugging during software\ndevelopment. You can add code to dump a variable and then remove the code very\nquickly.\n\n\nAlso consider the \nzend-log component\n\nwhen writing more permanent debugging code. For example, you can use the\n\nDEBUG\n log level and the\n\nstream log writer\n\nto output the string returned by \nZend\\Debug\\Debug::dump()\n.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "zend-debug exposes the static method  Zend\\Debug\\Debug::dump() , which prints or\nreturns information about an expression. This simple technique of debugging is\ncommon because it is easy to use in an ad hoc fashion and requires no\ninitialization, special tools, or debugging environment.",
            "title": "Usage"
        },
        {
            "location": "/usage/#example",
            "text": "Zend\\Debug\\Debug::dump($var, $label = null, $echo = true);  The  $var  argument specifies the expression or variable about which the Zend\\Debug\\Debug::dump()  method outputs information.  The  $label  argument is a string to be prepended to the output of Zend\\Debug\\Debug::dump() . It may be useful, for example, to use labels if you\nare dumping information about multiple variables on a given screen.  The boolean  $echo  argument specifies whether the output of Zend\\Debug\\Debug::dump()  is echoed or not. If  TRUE , the output is echoed.\nRegardless of the value of the  $echo  argument, the return value of this method\ncontains the output.  It may be helpful to understand that  Zend\\Debug\\Debug::dump()  wraps the PHP\nfunction  var_dump() . If the output stream is\ndetected as a web presentation, the output of  var_dump()  is escaped using htmlspecialchars()  and wrapped with HTML <pre>  tags.",
            "title": "Example"
        },
        {
            "location": "/usage/#debugging-with-zendlog",
            "text": "Zend\\Debug\\Debug::dump()  is best for ad hoc debugging during software\ndevelopment. You can add code to dump a variable and then remove the code very\nquickly.  Also consider the  zend-log component \nwhen writing more permanent debugging code. For example, you can use the DEBUG  log level and the stream log writer \nto output the string returned by  Zend\\Debug\\Debug::dump() .",
            "title": "Debugging with Zend\\Log"
        }
    ]
}